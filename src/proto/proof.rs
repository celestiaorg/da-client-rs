// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proof.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:fraud.pb.FraudMessageRequest)
pub struct FraudMessageRequest {
    // message fields
    // @@protoc_insertion_point(field:fraud.pb.FraudMessageRequest.RequestedProofType)
    pub RequestedProofType: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:fraud.pb.FraudMessageRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FraudMessageRequest {
    fn default() -> &'a FraudMessageRequest {
        <FraudMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl FraudMessageRequest {
    pub fn new() -> FraudMessageRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "RequestedProofType",
            |m: &FraudMessageRequest| { &m.RequestedProofType },
            |m: &mut FraudMessageRequest| { &mut m.RequestedProofType },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FraudMessageRequest>(
            "FraudMessageRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FraudMessageRequest {
    const NAME: &'static str = "FraudMessageRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.RequestedProofType.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.RequestedProofType {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.RequestedProofType {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FraudMessageRequest {
        FraudMessageRequest::new()
    }

    fn clear(&mut self) {
        self.RequestedProofType.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FraudMessageRequest {
        static instance: FraudMessageRequest = FraudMessageRequest {
            RequestedProofType: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FraudMessageRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FraudMessageRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FraudMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FraudMessageRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:fraud.pb.ProofResponse)
pub struct ProofResponse {
    // message fields
    // @@protoc_insertion_point(field:fraud.pb.ProofResponse.Type)
    pub Type: ::std::string::String,
    // @@protoc_insertion_point(field:fraud.pb.ProofResponse.Value)
    pub Value: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:fraud.pb.ProofResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProofResponse {
    fn default() -> &'a ProofResponse {
        <ProofResponse as ::protobuf::Message>::default_instance()
    }
}

impl ProofResponse {
    pub fn new() -> ProofResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Type",
            |m: &ProofResponse| { &m.Type },
            |m: &mut ProofResponse| { &mut m.Type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "Value",
            |m: &ProofResponse| { &m.Value },
            |m: &mut ProofResponse| { &mut m.Value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProofResponse>(
            "ProofResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProofResponse {
    const NAME: &'static str = "ProofResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Type = is.read_string()?;
                },
                18 => {
                    self.Value.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Type);
        }
        for value in &self.Value {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Type.is_empty() {
            os.write_string(1, &self.Type)?;
        }
        for v in &self.Value {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProofResponse {
        ProofResponse::new()
    }

    fn clear(&mut self) {
        self.Type.clear();
        self.Value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProofResponse {
        static instance: ProofResponse = ProofResponse {
            Type: ::std::string::String::new(),
            Value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProofResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProofResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProofResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProofResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:fraud.pb.FraudMessageResponse)
pub struct FraudMessageResponse {
    // message fields
    // @@protoc_insertion_point(field:fraud.pb.FraudMessageResponse.Proofs)
    pub Proofs: ::std::vec::Vec<ProofResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:fraud.pb.FraudMessageResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FraudMessageResponse {
    fn default() -> &'a FraudMessageResponse {
        <FraudMessageResponse as ::protobuf::Message>::default_instance()
    }
}

impl FraudMessageResponse {
    pub fn new() -> FraudMessageResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "Proofs",
            |m: &FraudMessageResponse| { &m.Proofs },
            |m: &mut FraudMessageResponse| { &mut m.Proofs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FraudMessageResponse>(
            "FraudMessageResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FraudMessageResponse {
    const NAME: &'static str = "FraudMessageResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Proofs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.Proofs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.Proofs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FraudMessageResponse {
        FraudMessageResponse::new()
    }

    fn clear(&mut self) {
        self.Proofs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FraudMessageResponse {
        static instance: FraudMessageResponse = FraudMessageResponse {
            Proofs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FraudMessageResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FraudMessageResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FraudMessageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FraudMessageResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bproof.proto\x12\x08fraud.pb\"E\n\x13FraudMessageRequest\x12.\n\x12\
    RequestedProofType\x18\x01\x20\x03(\tR\x12RequestedProofType\"9\n\rProof\
    Response\x12\x12\n\x04Type\x18\x01\x20\x01(\tR\x04Type\x12\x14\n\x05Valu\
    e\x18\x02\x20\x03(\x0cR\x05Value\"G\n\x14FraudMessageResponse\x12/\n\x06\
    Proofs\x18\x01\x20\x03(\x0b2\x17.fraud.pb.ProofResponseR\x06ProofsJ\xea\
    \x02\n\x06\x12\x04\0\0\x0f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\x11\n\n\n\x02\x04\0\x12\x04\x04\0\x06\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x04\x08\x1b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\
    \x02)\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x05\x02\n\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\x05\x0b\x11\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\
    \x12$\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05'(\n\n\n\x02\x04\x01\x12\
    \x04\x08\0\x0b\x01\n\n\n\x03\x04\x01\x01\x12\x03\x08\x08\x15\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\t\x02\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\t\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\t\t\r\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\t\x10\x11\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\n\x02\
    \x1b\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\n\x02\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\n\x0b\x10\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\n\
    \x11\x16\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\n\x19\x1a\n\n\n\x02\x04\
    \x02\x12\x04\r\0\x0f\x01\n\n\n\x03\x04\x02\x01\x12\x03\r\x08\x1c\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\x0e\x02#\n\x0c\n\x05\x04\x02\x02\0\x04\x12\
    \x03\x0e\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x0e\x0b\x18\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x0e\x19\x1f\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x0e!\"b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(FraudMessageRequest::generated_message_descriptor_data());
            messages.push(ProofResponse::generated_message_descriptor_data());
            messages.push(FraudMessageResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
